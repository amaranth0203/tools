

;; (set-default-font "-outline-Î¢ÈíÑÅºÚ-normal-normal-normal-sans-16-*-*-*-p-*-iso8859-1")
(if window-system
    (tool-bar-mode 0))
(if window-system
    (menu-bar-mode 0))
(if window-system
    (scroll-bar-mode 0))


;; Auto generated by chinese-fonts-setup
;; <https://github.com/tumashu/chinese-fonts-setup>
;; (set-face-attribute
;;  'default nil
;;  :font (font-spec :name "-outline-Consolas-bold-normal-normal-mono-*-*-*-*-c-*-iso10646-1"
;;                   :weight 'normal
;;                   :slant 'normal
;;                   :size 11.5))
;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;   (set-fontset-font
;;    (frame-parameter nil 'font)
;;    charset
;;    (font-spec :name "-outline-Î¢ÈíÑÅºÚ-normal-normal-normal-sans-*-*-*-*-p-*-iso10646-1"
;;               :weight 'normal
;;               :slant 'normal
;;               :size 12.0)))

;; ---------- basic config -----------

(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
(setq indent-line-function 'insert-tab)
;; cursor blinking speed
( setq blink-cursor-interval .1 )
;; color
;; (add-to-list 'default-frame-alist '(foreground-color . "#E0DFDB"))
;; (add-to-list 'default-frame-alist '(background-color . "#102372"))
;; (add-to-list 'default-frame-alist '(foreground-color . "#C81010"))
;; (add-to-list 'default-frame-alist '(background-color . "#400000"))
;; n(add-to-list 'default-frame-alist '(foreground-color . "#F8F8F2"))
;; (add-to-list 'default-frame-alist '(background-color . "#272822"))

;; ido
;; ( ido-mode 1 )
;; org-mode
( setq org-tag-column 77 )
( setq org-log-done 'time )
( setq org-log-done 'note )
( setq org-todo-keywords
       '((sequence "TODO(t@/!)" "|" "DONE(d@/!)")))

;; proxy
;; ( setq url-proxy-services '(("http" . "localhost:2333")
;;                                       ("http" . "localhost:2333")))
( setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
( setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
( prefer-coding-system 'utf-8 ) 
( setq c-default-style "linux"
       c-basic-offset 2 )

;; ---------- basic config ends ------

;; ---------- keybind ----------------
( define-key global-map ( kbd "C-c =" ) 'er/expand-region )
;; ( define-key global-map ( kbd "M-n" ) 'move-text-down )
;; ( define-key global-map ( kbd "M-p" ) 'move-text-up )
( define-key global-map ( kbd "C-x C-a" ) 'org-agenda )
( define-key global-map ( kbd "M-j" ) 'ace-jump-mode )
( define-key global-map ( kbd "C-c M-p" ) 'pop-tag-mark )
( with-eval-after-load "sh-script"
  ( define-key sh-mode-map ( kbd "C-c ;" ) 'check_to_switch_inline_shell_comment_status ) )
;; ---------- keybind ends -----------

(require 'package) ;; You might already have this line
(setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                         ("melpa" . "http://elpa.emacs-china.org/melpa/")))
;; (add-to-list 'package-archives
;;              '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this line

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(beacon-color "#f2777a")
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(custom-enabled-themes (quote (moe-dark)))
 '(custom-safe-themes
   (quote
    ("26d49386a2036df7ccbe802a06a759031e4455f07bda559dcf221f53e8850e69" "13d20048c12826c7ea636fbe513d6f24c0d43709a761052adbca052708798ce3" "0c32e4f0789f567a560be625f239ee9ec651e524e46a4708eb4aba3b9cdc89c5" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" "a800120841da457aa2f86b98fb9fd8df8ba682cebde033d7dbf8077c1b7d677a" default)))
 '(fci-rule-color "#383838")
 '(flycheck-color-mode-line-face-to-color (quote mode-line-buffer-id))
 '(frame-background-mode (quote dark))
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(org-agenda-files
   (quote
    ("~/Shadow/notes/org/slf.org" "~/Shadow/notes/org/vivo.org")))
 '(package-selected-packages
   (quote
    (color-theme-sanityinc-tomorrow moe-theme pager smooth-scrolling zenburn-theme ac-php php-mode helm-swoop helm jedi python-mode chinese-fonts-setup ace-jump-mode move-text yasnippet expand-region ggtags auto-complete sr-speedbar git-gutter hide-lines window-numbering slime)))
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(smooth-scrolling-mode t)
 '(vc-annotate-background "#2B2B2B")
 '(vc-annotate-color-map
   (quote
    ((20 . "#BC8383")
     (40 . "#CC9393")
     (60 . "#DFAF8F")
     (80 . "#D0BF8F")
     (100 . "#E0CF9F")
     (120 . "#F0DFAF")
     (140 . "#5F7F5F")
     (160 . "#7F9F7F")
     (180 . "#8FB28F")
     (200 . "#9FC59F")
     (220 . "#AFD8AF")
     (240 . "#BFEBBF")
     (260 . "#93E0E3")
     (280 . "#6CA0A3")
     (300 . "#7CB8BB")
     (320 . "#8CD0D3")
     (340 . "#94BFF3")
     (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color "#DC8CC3"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; mac gui load env variable first
(when (memq window-system '(mac ns x ))
  (exec-path-from-shell-initialize))
(exec-path-from-shell-copy-env "wn")

;; smooth scroll
( smooth-scrolling-mode 1 )

;; pager
(global-set-key "\C-v"	   'pager-page-down)
(global-set-key [next] 	   'pager-page-down)
(global-set-key "\ev"	   'pager-page-up)
(global-set-key [prior]	   'pager-page-up)
(global-set-key '[M-up]    'pager-row-up)
(global-set-key '[M-kp-8]  'pager-row-up)
(global-set-key '[M-down]  'pager-row-down)
(global-set-key '[M-kp-2]  'pager-row-down)
(global-set-key "\en"      'pager-row-down)
(global-set-key "\ep"      'pager-row-up)

;; theme
(load-theme 'zenburn t)

;; slime
;; Set your lisp system and, optionally, some contribs
;; (setq inferior-lisp-program "/usr/bin/sbcl")
;; (setq slime-contribs '(slime-fancy))

;; window-numbering
( window-numbering-mode 1 )

;; git-gutter
( global-git-gutter-mode +1 )

;; auto-complete
( global-auto-complete-mode 1 )
( add-to-list 'ac-modes 'org-mode )

;; ggtags
( ggtags-mode 1 )
( setq ggtags-oversize-limit t )
(require 'ggtags)
(defun gtags-root-dir ()
  "Returns GTAGS root directory or nil if doesn't exist."
  (with-temp-buffer
    (if (zerop (call-process "global" nil t nil "-pr"))
        (buffer-substring (point-min) (1- (point-max)))
      nil)))
(defun gtags-update-single(filename)  
  "Update Gtags database for changes in a single file"
  (interactive)
  (start-process "update-gtags" "update-gtags" "bash" "-c" (concat "cd " (gtags-root-dir) " ; gtags --single-update " filename )))
(defun gtags-update-current-file()
  (interactive)
  (defvar filename)
  (setq filename (replace-regexp-in-string (gtags-root-dir) "." (buffer-file-name (current-buffer))))
  (gtags-update-single filename)
  (message "Gtags updated for %s" filename))
(defun gtags-update-hook()
  "Update GTAGS file incrementally upon saving a file"
  (when ggtags-mode
    (when (gtags-root-dir)
      (gtags-update-current-file))))
(add-hook 'after-save-hook 'gtags-update-hook)

;; YASnippet
( require 'yasnippet )
( add-to-list
  'yas-snippet-dirs
  ( concat ( getenv "wn" ) "/yasnippet_template" ) )
( yas-global-mode 1 )
(add-hook 'org-mode-hook
   '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))

;; helm 
( helm-mode 1 )
( require 'recentf )
( recentf-mode 1 )
( setq-default recent-save-file "~/.emacs.d/recentf" )
( setq recentf-auto-cleanup 'never )
( setq bookmark-save-flag 1 )
( global-set-key (kbd "M-x") #'helm-M-x )
( global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks )
( global-set-key (kbd "C-x C-f") #'helm-find-files )

;; sr-speedbar
( setq sr-speedbar-max-width 44 )
( setq sr-speedbar-right-side nil )

;; unknown
(put 'set-goal-column 'disabled nil)

;; chinese-fonts-setup
;; ( require 'chinese-fonts-setup )

;; web-mode
;; (require 'web-mode)
;; (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
;; (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode));;;;;;;; plain html
;; (setq web-mode-engines-alist
;;       '(("php"    . "\\.html\\'")
;;         ("blade"  . "\\.blade\\."))
;; )
;; (setq web-mode-markup-indent-offset 2)
;; (setq web-mode-css-indent-offset 2)
;; (setq web-mode-code-indent-offset 2)

;;;; for dotnet
;;(require 'csharp-mode)
;;(setq auto-mode-alist
;;      (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))
;;;; -- omnisharp start --
;;(add-hook 'csharp-mode-hook 'omnisharp-mode)
;;(add-hook 'csharp-mode-hook
;;          (lambda()
;;            (progn (local-set-key (kbd "C-M-g") #'omnisharp-go-to-definition)
;;                   (local-set-key (kbd "C-i") #'omnisharp-auto-complete)
;;                   )))
;;(setq omnisharp-server-executable-path "/usr/local/bin/omnisharp")
;;;; ( define-key global-map ( kbd "C-i" ) 'omnisharp-auto-complete )
;;;; -- omnisharp ends --

;; something written by myself
(load ( concat ( getenv "wn" ) "/.emacs.selfused.lisp" ))

;;
;; for debugging
;;
;; ( message "wassup" )
;; ( message ( getenv "ws" ) )
;; ( message ( getenv "wn" ) )
;; ( message "wassup ends" )
