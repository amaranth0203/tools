#!/usr/bin/env bash

#
# case no parameters :
#     print index before output of git status --short --branch
# case with index :
#     concat second column of index of git status --short --branch
#     separated with " "
# FOR
#     vim_ `c2 1 2 3`
#     git push origin `c2 0`
# to using it
# 
#               qiyunhu
#               2016.09.10
# 

cmd='git status --short --branch'
re='^[0-9]+$'
idxs=()
output=""

main( ) {
    check_git_repo
    check_input $@
    generate_output $@
    echo $output
}

generate_output( ) {
    idx=0
    while read line
    do
        array_contains idxs $idx && 
        output=$output" "$(
            printf '%s' "$line" | 
            awk -F'\\.\\.\\.' '{print $1}' | # for local branch name
            cut -d' ' -f2- # 名字有空格的地方使用 cut 比 awb 方便 2019年04月26日
        )
        (( idx++ ))
    done < <($cmd 2>&1)
}

array_contains( ) {
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"
    do
        if [[ $element == $seeking ]]
        then
            in=0
            break
        fi
    done
    return $in
}

check_input( ) {
    if [ "$#" -eq 0 ] ; then # no file selected , print indexes
        idx=0
        # 这样有颜色 2019年04月26日
        input=$(cat <<EOF
$(script -q /dev/null $cmd)
EOF
             )
        # 双引号输出多行 2019年04月26日
        echo "$input" | \
        while read line
        do
            printf '%d %s\n' "$idx" "$line"
            (( idx++ ))
        done
        exit
    else
        idxs=( "$@" )
    fi
    for idx in "${idxs[@]}"
    do
        if ! [[ $idx =~ $re ]]
        then 
            echo "[-] $idx not a number" >&2 ; exit 1
        fi
    done
}

check_git_repo( ) {
    eval $cmd > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo '[-] not a git repository'
        exit
    fi
}

main $@

